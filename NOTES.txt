Download github repo
====================
https://github.com/rcc-uchicago/genetic-data-analysis-1

Set up your cluster computing environment
=========================================
1. Connect to midway2 (see https://rcc.uchicago.edu/docs/connecting).
2. Request 4 CPUs and 10 GB memory on a midway2 compute node:
     sinteractive --partition=broadwl --time=3:00:00 --mem=10G \
       --cpus-per-task=4
3. Make sure that you can display graphics, e.g.
     module load R/3.4.3
     R
     plot(cars$dist,cars$speed)
   You should see a scatterplot. If not, then you need to use a
   different method to connect to midway2.

Merge with Affymetrix Human Origins data
========================================
* Commands to merge the two data sets:
    ../bin/plink --bfile 1kg_unrelated --extract 1kg_origins_markers.txt \
      --make-bed --out 1kg_unrelated_reduced
    ../bin/plink --bfile origins --extract 1kg_origins_markers.txt \
      --remove dupids.txt --make-bed --out origins_reduced
    ../bin/plink --bfile 1kg_unrelated_reduced --bmerge origins_reduced \
      --out 1kg_origins_combined
* "Prune" SNPs in LD (typically you will want to be more aggressive):
    ../bin/plink --bfile 1kg_origins_combined --indep-pairwise 1000 500 0.8
    ../bin/plink --bfile 1kg_origins_combined --make-bed \
      --extract plink.prune.in --out 1kg_origins_pruned

Run PCA on combined data set
============================
* We are going to use the rsvd package in R to compute PCs.
* Convert genotypes to a numeric format that will be more convenient
  for analysis in R:
    ../bin/plink --bfile 1kg_origins_pruned --recode A \
      --out 1kg_origins_recoded
* Move to the repository root, and start up R:
    cd ..
    module load R/3.4.3
    export OPENBLAS_NUM_THREADS=4 (optional)
    R --no-save
* Load the genotype data into R: 
    library(data.table)
    source("code/geno.utils.R")
    getwd()
    geno <- read.geno.raw("data/1kg_origins_recoded.raw")
    class(geno)
    dim(geno)
    geno[1:5,1:5]
* We need to fill in the missing genotypes:
    100*mean(is.na(geno))
    p <- ncol(geno)
    x <- colMeans(geno,na.rm = TRUE)
    for (j in 1:p) {
      i         <- which(is.na(geno[,j]))
      geno[i,j] <- x[j]
    }
    sum(is.na(geno))
* Compute the first 10 PCs (components explaining the most variation
  in the genotypes):
    library(rsvd)
    out.pca <- rpca(geno,k = 10,center = TRUE,scale = FALSE,retx = TRUE)
    summary(out.pca)
    head(out.pca$x)
    pcs <- out.pca$x
    colnames(pcs) <- paste0("PC",1:10)
* Let's save the results of our analysis.
    save(file = "output/1kg_origins_pca.RData",
         list = c("out.pca","pcs"))

Visualize & interpret PCA results
=================================
* At this point, we have finished all the computationally intensive
  aspects of our analysis.
* module load R/3.4.3
* R --no-save
* Load the ggplot2 package and load the PC results just in case you
  don't already have them loaded:
    getwd()
    library(ggplot2)
    library(cowplot)
    source("code/geno.utils.R")
    load("output/1kg_origins_pca.RData")
* Let's plot all samples projected onto the first 2 PCs:
    p <- basic.pc.plot(pcs,x = "PC1",y = "PC2")
    print(p)
* There is definitely structure, but it is difficult to
  interpret---let's visualize the samples with their population
  labels. To do so, let's load the population labels assigned to the
  1000 Genomes samples:
    labels.1kg <- read.table("data/omni_samples.20141118.panel",
                             sep = " ",header = TRUE,as.is = "id")
    pcs <- add.poplabels(pcs,labels.1kg)
    head(pcs)
    p2 <- labeled.pc.plot(pcs,x = "PC1",y = "PC2",label = "label")
    print(p2)
* Take time to discuss interesting insights from this plot. Make use
  of the 1kg.pop to interpret labels.
* We can also zoom in on a portion of the scatterplot, e.g.,
    p2 + xlim(c(-30,10)) + ylim(c(10,50))
* One missing element here is the labels for the 5 samples from the
  Human Origins data set. It would be good to show the sample ids for
  these 5 samples so that we can interpret their projection onto the
  top 2 PCs. I've created a third (slightly more complicated) plotting
  function to accomplish this.
    p3 <- labeled.pc.plot2(pcs,x = "PC1",y = "PC2",label = "label")
    print(p3)
* ggsave("output/1kg_origins_pcs1+2.pdf",p3)
